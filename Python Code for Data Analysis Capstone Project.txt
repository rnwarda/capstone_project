# 1. Created in VS Code

# 2. Prerequisites: install a library called pandas, the Google Gemini API library, and matplotlib.

try:
    import pandas as pd
    import google.generativeai as genai
    import matplotlib.pyplot as plt
    print("Required libraries are already installed.")
except ImportError:
    print("One or more required libraries not found. Installing now...")
    import subprocess
    import sys
    
    # This command will install the libraries needed for the project.
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pandas", "google-generativeai", "matplotlib"])
    
    # After installing, we try to import again.
    import pandas as pd
    import google.generativeai as genai
    import matplotlib.pyplot as plt
    print("Installation complete. Restarting script...")
    
    # To ensure the newly installed libraries are used, we exit the current script.
    # The user can then run it again.
    sys.exit()


# 3. Data Preparation: Loading our data.

business_data = [
    {"product": "Laptop", "region": "North", "sales": 15000, "customer_age": 28},
    {"product": "Mouse", "region": "South", "sales": 300, "customer_age": 45},
    {"product": "Laptop", "region": "South", "sales": 12000, "customer_age": 32},
    {"product": "Keyboard", "region": "North", "sales": 800, "customer_age": 55},
    {"product": "Mouse", "region": "North", "sales": 500, "customer_age": 22},
    {"product": "Laptop", "region": "West", "sales": 25000, "customer_age": 38},
    {"product": "Keyboard", "region": "East", "sales": 1100, "customer_age": 60},
]

# The line below creates a "DataFrame" from our data.
# A DataFrame is a special table-like object from the pandas library that is perfect for analysis.
df = pd.DataFrame(business_data)

# 4. Basic Data Analysis: Finding a key metric.
# This is where we start to get insights from our data.
# We'll calculate the total sales for each product.
# .groupby() groups all the rows that have the same value (e.g., all "Laptop" rows).
# .sum() then adds up the 'sales' for each group.
product_sales = df.groupby("product")["sales"].sum()

# We can also find the average age of our customers.
average_customer_age = df["customer_age"].mean()

# 5. LLM Application (Simulated): Getting insights.
# This is where we will use the Google Gemini API.
genai.configure(api_key="AIzaSyBurIY15r7WOX87DbH4vNUfoxqBYcnOX8o")

# This creates an instance of the Gemini model.
model = genai.GenerativeModel("gemini-1.5-flash")

# 6. Knowledge Base Creation

# Create text "chunks" for our knowledge base. Each chunk is a piece of information.
knowledge_base_chunks = [
    "Sales data for all products: Laptops have the highest total sales.",
    f"Product sales breakdown: {product_sales.to_string()}",
    f"Customer demographics: The average customer age is {average_customer_age:.2f} years.",
    "Regional sales data: The North region shows strong sales performance for Keyboards and Laptops."
]

# 7. LLM Application Development
prompt = f"""
Based on the following business data, provide a comprehensive summary
of key trends, insights, and recommendations. Use the data provided
to support your answer.

Business Data:
{'\n'.join(knowledge_base_chunks)}

Summary:
"""

# The line below calls the Gemini model with our prompt and generates a response.
response = model.generate_content(prompt)

# 8. Data Visualization 
print("\n--- Generating Data Visualization ---")

# Creates a new figure (a blank canvas for our plot).
plt.figure(figsize=(8, 6))

# This line creates a bar chart.
plt.bar(product_sales.index, product_sales.values, color=['skyblue', 'salmon', 'lightgreen'])

# add labels and a title to make the plot easy to understand.
plt.title("Total Sales by Product")
plt.xlabel("Product")
plt.ylabel("Total Sales")

# This line saves the chart as an image file in the same folder where the script is.
plt.savefig("product_sales_chart.png")

# show the plot on the screen (useful for debugging, but not for a final UI).
# plt.show()
print("Data visualization has been saved as 'product_sales_chart.png'.")


# 9. Printing the result.
# We now print the actual summary generated by the AI model.
print("\n--- AI-Powered Business Summary (Generated by Gemini) ---")
print(response.text)
